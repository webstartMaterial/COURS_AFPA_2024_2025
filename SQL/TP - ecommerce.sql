-- MySQL Script generated by MySQL Workbench
-- Mon Dec 16 11:45:09 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ecommerce
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ecommerce
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ecommerce` DEFAULT CHARACTER SET utf8 ;
USE `ecommerce` ;

-- -----------------------------------------------------
-- Table `ecommerce`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  `created_at` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ecommerce`.`products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`products` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  `stock_quantity` INT NOT NULL,
  `category` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ecommerce`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`orders` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `order_date` DATE NOT NULL,
  `total_price` DECIMAL(10,2) NOT NULL,
  `status` VARCHAR(50) NOT NULL,
  `users_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_orders_users_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `fk_orders_users`
    FOREIGN KEY (`users_id`)
    REFERENCES `ecommerce`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ecommerce`.`order_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ecommerce`.`order_details` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `quantity` INT NOT NULL,
  `subtotal` DECIMAL(10,2) NOT NULL,
  `products_id` INT NOT NULL,
  `orders_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_order_details_products1_idx` (`products_id` ASC) VISIBLE,
  INDEX `fk_order_details_orders1_idx` (`orders_id` ASC) VISIBLE,
  CONSTRAINT `fk_order_details_products1`
    FOREIGN KEY (`products_id`)
    REFERENCES `ecommerce`.`products` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_details_orders1`
    FOREIGN KEY (`orders_id`)
    REFERENCES `ecommerce`.`orders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;





-- 1. Insérez des données dans les tables. Exemple :


INSERT INTO users VALUES
(1, 'Alice', 'alice@example.com', 'password123', '2024-01-01'),
(2, 'Bob', 'bob@example.com', 'securepass', '2024-02-01');

INSERT INTO products VALUES
(1, 'Laptop', 999.99, 10, 'Electronics'),
(2, 'Headphones', 49.99, 50, 'Accessories');

INSERT INTO orders (id, users_id, order_date, total_price, status) VALUES
(1, 1, '2024-03-01', 1099.98, 'Completed'),
(2, 2, '2024-03-05', 49.99, 'Pending');

INSERT INTO order_details (id, quantity, products_id, orders_id, subtotal) VALUES
(1, 1, 1, 1, 999.99),
(2, 1, 2, 2, 99.98);


   -- Afficher tous les produits commandés avec le nom de l'utilisateur, triés par `order_date`.

    SELECT o.order_date, u.name, p.name FROM orders o
    INNER JOIN order_details od ON od.orders_id = o.id
    INNER JOIN users u ON u.id = o.users_id
    INNER JOIN products p ON p.id = od.products_id
    ORDER BY o.order_date;

   -- Filtrer les commandes dont le statut est "Pending".

    SELECT * FROM orders WHERE status = 'Pending';


   -- Trouver le produit le plus cher vendu.

    SELECT MAX(price) AS max_price FROM products;

   -- Calculer le total des ventes par catégorie.

   SELECT p.category, SUM(od.subtotal) FROM order_details od
   INNER JOIN products p ON p.id = od.products_id
   GROUP BY p.category;

   -- Lister les utilisateurs n'ayant passé aucune commande.
    SELECT * FROM users WHERE id NOT IN (SELECT users_id FROM orders);



    5. Modification de données (20 min)

    1. Modifiez le stock du produit "Laptop" en le diminuant de 1.

    UPDATE products SET stock_quantity = stock_quantity - 1 WHERE name = 'Laptop';

    2. Changez le statut de la commande de Bob à "Completed".

    UPDATE orders SET status = 'Completed' WHERE users_id = (SELECT id FROM users WHERE name = 'Bob');

    3. Mettez à jour le prix des produits de la catégorie "Accessories" en appliquant une réduction de 10%.

    UPDATE products SET price = price * 0.9 WHERE category = 'Accessories';

